{"version":3,"sources":["Assets/Images/me2.jpg","Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","useStyles","makeStyles","bigAvatar","margin","width","height","justifyContent","alignItems","alignSelf","Home","classes","Container","Grid","container","justify","Avatar","alt","src","require","className","Typography","variant","List","component","aria-label","ListItem","button","ListItemText","primary","secondary","App","AppBar","position","Toolbar","Button","color","dangerouslySetInnerHTML","__html","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sLAAAA,EAAOC,QAAU,IAA0B,iC,wRCcrCC,EAAYC,YAAW,CACzBC,UAAW,CACTC,OAAQ,GACRC,MAAO,IACPC,OAAQ,IACRC,eAAgB,SAChBC,WAAY,SACZC,UAAW,YAwCFC,EAnCQ,WACnB,IAAMC,EAAUV,IAChB,OACI,6BACI,kBAACW,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAU,UACtB,kBAACC,EAAA,EAAD,CAAQC,IAAI,cAAcC,IAAKC,EAAQ,IAA4BC,UAAWT,EAAQR,aAE1F,kBAACkB,EAAA,EAAD,CAAYC,QAAQ,MAApB,mBAGA,kBAACD,EAAA,EAAD,CAAYC,QAAQ,MAApB,qBAGA,kBAAC,IAAD,OAGJ,kBAACV,EAAA,EAAD,KACI,kBAACS,EAAA,EAAD,CAAYC,QAAQ,MAApB,YAGA,kBAACD,EAAA,EAAD,CAAYC,QAAQ,OAGxB,kBAACC,EAAA,EAAD,CAAMC,UAAU,MAAMC,aAAW,wBACrC,kBAACC,EAAA,EAAD,CAAUC,QAAM,GACd,kBAACC,EAAA,EAAD,CAAcC,QAAQ,sBAAsBC,UAAU,4DCGjDC,EAhCO,WACpB,OACE,yBAAKX,UAAU,OACZ,kBAACY,EAAA,EAAD,CAAQC,SAAS,UAChB,kBAACC,EAAA,EAAD,KACE,kBAACtB,EAAA,EAAD,KACA,kBAACS,EAAA,EAAD,CAAYC,QAAQ,MAClB,kBAACa,EAAA,EAAD,CAAQC,MAAM,WAAd,oBAIF,kBAACD,EAAA,EAAD,CAAQC,MAAM,WAAU,kBAAC,IAAD,MAAxB,WACA,kBAACD,EAAA,EAAD,CAAQC,MAAM,WAAU,kBAAC,IAAD,MAAxB,WACA,kBAACD,EAAA,EAAD,CAAQC,MAAM,WAAU,kBAAC,IAAD,MAAxB,SACA,kBAACD,EAAA,EAAD,CAAQC,MAAM,WAAU,kBAAC,IAAD,MAAxB,qBACA,kBAACD,EAAA,EAAD,CAAQC,MAAM,WAAU,kBAAC,IAAD,MAAxB,aACA,kBAACD,EAAA,EAAD,CAAQC,MAAM,WAAU,kBAAC,IAAD,MAAxB,WAEA,gCACA,yBAAKC,wBAAyB,CAACC,OAAQ,ksDAQzC,kBAAC,EAAD,QCtCYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDkI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f1c659ba.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/me2.4011b7fe.jpg\";","import React from 'react';\r\nimport Container from '@material-ui/core/Container';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\n\r\nimport Avatar from '@material-ui/core/Avatar';\r\n\r\nconst useStyles = makeStyles({\r\n    bigAvatar: {\r\n      margin: 10,\r\n      width: 400,\r\n      height: 400,\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      alignSelf: 'center'\r\n    },\r\n  });\r\n\r\n// should be using typography\r\nconst Home: React.FC = () => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div>\r\n            <Container>\r\n                <Grid container justify = \"center\">\r\n                    <Avatar alt=\"profile_pic\" src={require('./Assets/Images/me2.jpg')} className={classes.bigAvatar} />\r\n                </Grid>\r\n                <Typography variant=\"h1\">\r\n                    Connor Mulqueen\r\n                </Typography>\r\n                <Typography variant=\"h4\">\r\n                    Software Engineer\r\n                </Typography>\r\n                <ArrowDownwardIcon />\r\n            </Container>\r\n\r\n            <Container>\r\n                <Typography variant='h3'>\r\n                    Projects\r\n                </Typography>\r\n                <Typography variant='h4'>\r\n\r\n                </Typography>\r\n            <List component=\"nav\" aria-label=\"main mailbox folders\">\r\n        <ListItem button>\r\n          <ListItemText primary=\"Mechanical Squirrel\" secondary='A discord bot for World of Warcraft: Classic memes' />\r\n        </ListItem>\r\n        </List>\r\n            </Container>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport WhatshotIcon from '@material-ui/icons/Whatshot';\r\nimport GitHubIcon from '@material-ui/icons/GitHub';\r\nimport DescriptionIcon from '@material-ui/icons/Description';\r\nimport MessageIcon from '@material-ui/icons/Message';\r\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\r\nimport FreeBreakfastIcon from '@material-ui/icons/FreeBreakfast';\r\nimport WorkIcon from '@material-ui/icons/Work';\r\nimport Container from '@material-ui/core/Container';\r\n\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Home from './Home';\r\nimport MechanicalSquirrel from './Projects/Mechanical-Squirrel';\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <div className=\"App\">\r\n       <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <Container>\r\n          <Typography variant=\"h6\" >\r\n            <Button color=\"inherit\">\r\n              Connor Mulqueen\r\n            </Button>\r\n          </Typography>\r\n          <Button color=\"inherit\"><DescriptionIcon></DescriptionIcon> Resume</Button>\r\n          <Button color=\"inherit\"><GitHubIcon></GitHubIcon> GitHub</Button>\r\n          <Button color=\"inherit\"><GitHubIcon></GitHubIcon> Blog</Button>\r\n          <Button color=\"inherit\"><WorkIcon></WorkIcon>Personal Projects</Button>\r\n          <Button color=\"inherit\"><LinkedInIcon></LinkedInIcon> LinkedIn</Button>\r\n          <Button color=\"inherit\"><WhatshotIcon></WhatshotIcon> Strava</Button>\r\n\r\n          <header>\r\n          <div dangerouslySetInnerHTML={{__html: '<style>.bmc-button img{width: 35px !important;margin-bottom: 1px !important;box-shadow: none !important;border: none !important;vertical-align: middle !important;}.bmc-button{padding: 7px 5px 7px 10px !important;line-height: 35px !important;height:51px !important;min-width:217px !important;text-decoration: none !important;display:inline-flex !important;color:#ffffff !important;background-color:#FF813F !important;border-radius: 5px !important;border: 1px solid transparent !important;padding: 7px 5px 7px 10px !important;font-size: 20px !important;letter-spacing:-0.08px !important;box-shadow: 0px 1px 2px rgba(190, 190, 190, 0.5) !important;-webkit-box-shadow: 0px 1px 2px 2px rgba(190, 190, 190, 0.5) !important;margin: 0 auto !important;font-family:\\'Lato\\', sans-serif !important;-webkit-box-sizing: border-box !important;box-sizing: border-box !important;-o-transition: 0.3s all linear !important;-webkit-transition: 0.3s all linear !important;-moz-transition: 0.3s all linear !important;-ms-transition: 0.3s all linear !important;transition: 0.3s all linear !important;}.bmc-button:hover, .bmc-button:active, .bmc-button:focus {-webkit-box-shadow: 0px 1px 2px 2px rgba(190, 190, 190, 0.5) !important;text-decoration: none !important;box-shadow: 0px 1px 2px 2px rgba(190, 190, 190, 0.5) !important;opacity: 0.85 !important;color:#ffffff !important;}</style><link href=\"https://fonts.googleapis.com/css?family=Lato&subset=latin,latin-ext\" rel=\"stylesheet\"><a class=\"bmc-button\" target=\"_blank\" href=\"https://www.buymeacoffee.com/27JYSTw\"><img src=\"https://cdn.buymeacoffee.com/buttons/bmc-new-btn-logo.svg\" alt=\"Buy me a coffee\"><span style=\"margin-left:15px;font-size:19px !important;\">Buy me a coffee</span></a>'}} />\r\n\r\n          </header>\r\n\r\n          </Container>\r\n\r\n        </Toolbar>\r\n      </AppBar>\r\n        <Home />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'typeface-roboto';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}